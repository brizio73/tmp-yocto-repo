diff --git a/src/makefile b/src/makefile
index ae7484a..2c41f54 100644
--- a/src/makefile
+++ b/src/makefile
@@ -30,7 +30,6 @@ ZLOG_MAJOR=1
 ZLOG_MINOR=1
 
 # Fallback to gcc when $CC is not in $PATH.
-CC:=$(shell sh -c 'type $(CC) >/dev/null 2>/dev/null && echo $(CC) || echo gcc')
 OPTIMIZATION?=-O2
 WARNINGS=-Wall -Werror -Wstrict-prototypes -fwrapv
 DEBUG?= -g -ggdb
diff --git a/src/rule.c b/src/rule.c
index 89588a4..bbc22b1 100644
--- a/src/rule.c
+++ b/src/rule.c
@@ -567,6 +567,25 @@ err:
 	return -1;
 }
 
+static int zlog_rule_rotate(zlog_rule_t * a_rule, zlog_thread_t * a_thread)
+{
+    if (a_rule != NULL) {
+        zc_debug("rotate %s category", a_rule->category);
+        if (zlog_rotater_rotate(zlog_env_conf->rotater, 
+            a_rule->file_path, 0,
+            zlog_rule_gen_archive_path(a_rule, a_thread),
+            0, a_rule->archive_max_count)
+            ) {
+            zc_error("zlog_rotater_rotate fail");
+            return -1;
+        } /* success or no rotation do nothing */
+    } else {
+        zc_error("zlog_rotater_rotate fail null pointer");
+        return -1;
+    }
+    return 0;
+}
+
 zlog_rule_t *zlog_rule_new(char *line,
 		zc_arraylist_t *levels,
 		zlog_format_t * default_format,
@@ -604,6 +623,7 @@ zlog_rule_t *zlog_rule_new(char *line,
 		zc_error("calloc fail, errno[%d]", errno);
 		return NULL;
 	}
+    a_rule->rotate = NULL;
 
 	a_rule->file_perms = file_perms;
 	a_rule->fsync_period = fsync_period;
@@ -810,6 +830,8 @@ zlog_rule_t *zlog_rule_new(char *line,
 				a_rule->output = zlog_rule_output_dynamic_file_single;
 			} else {
 				a_rule->output = zlog_rule_output_dynamic_file_rotate;
+                a_rule->rotate = zlog_rule_rotate;
+                zc_debug("saved rotate function for %s category", category);
 			}
 		} else {
 			struct stat stb;
@@ -819,6 +841,8 @@ zlog_rule_t *zlog_rule_new(char *line,
 			} else {
 				/* as rotate, so need to reopen everytime */
 				a_rule->output = zlog_rule_output_static_file_rotate;
+                a_rule->rotate = zlog_rule_rotate;
+                zc_debug("saved rotate function for %s category", category);
 			}
 
 			a_rule->static_fd = open(a_rule->file_path,
diff --git a/src/rule.h b/src/rule.h
index e562185..611588d 100644
--- a/src/rule.h
+++ b/src/rule.h
@@ -64,6 +64,7 @@ struct zlog_rule_s {
 
 	zlog_format_t *format;
 	zlog_rule_output_fn output;
+    zlog_rule_output_fn rotate;
 
 	char record_name[MAXLEN_PATH + 1];
 	char record_path[MAXLEN_PATH + 1];
diff --git a/src/zlog.c b/src/zlog.c
index ea9dfe1..e8333a4 100644
--- a/src/zlog.c
+++ b/src/zlog.c
@@ -1004,3 +1004,39 @@ int zlog_set_record(const char *rname, zlog_record_fn record_output)
 	}
 	return rc;
 }
+
+/*******************************************************************************/
+void zlog_file_rotate(void)
+{
+    int i;
+	zlog_rule_t *a_rule;
+    zlog_thread_t *a_thread;
+    
+    zc_debug("------zlog_file_rotate begin------ ");
+    
+    pthread_rwlock_rdlock(&zlog_env_lock);
+
+	if (!zlog_env_is_init) {
+		zc_error("never call zlog_init() or dzlog_init() before");
+		goto exit;
+	}
+    
+    zlog_fetch_thread(a_thread, exit);
+
+	/* get match rules from all rules */
+	zc_arraylist_foreach(zlog_env_conf->rules, i, a_rule) {
+        
+        if (a_rule->rotate != NULL) {
+            zc_debug("------zlog_file_rotate rotate rules %d------ ", i);
+            a_rule->rotate(a_rule, a_thread);
+        } else {
+            zc_debug("------zlog_file_rotate not rotate rules %d------ ", i);
+        }
+	}
+    
+exit:
+	pthread_rwlock_unlock(&zlog_env_lock);
+    
+    zc_debug("------zlog_file_rotate end------ ");
+	return;
+}
diff --git a/src/zlog.h b/src/zlog.h
index a123825..a07e564 100644
--- a/src/zlog.h
+++ b/src/zlog.h
@@ -78,6 +78,10 @@ typedef struct zlog_msg_s {
 typedef int (*zlog_record_fn)(zlog_msg_t *msg);
 int zlog_set_record(const char *rname, zlog_record_fn record);
 
+
+void zlog_file_rotate(void);
+
+
 /******* useful macros, can be redefined at user's h file **********/
 
 typedef enum {
